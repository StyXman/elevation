#! /usr/bin/env ayrton

# this does not work yet
# parser= ArgumentParser ()
# parser.add_argument ('-b', '--bbox', metavar='W,S,E,N')
# parser.add_argument ('-i', '--input-dir')
# parser.add_argument ('-o', '--output-file-prefix')
# args= parser.parse_args ()

src_dir= argv[1]
out_prefix= argv[2]
# BUG in ayrton
# for the moment I have to do this this way
bbox= argv[3]
w, s, e, n= [ int (x) for x in bbox.split(',') ]

# TODO: hardcoded
pixels_per_degree= 3600 # 1 arc sec
degrees_per_pixel= 1.0/pixels_per_degree

xsize= int (e-w+1)*pixels_per_degree
ysize= int (n-s+1)*pixels_per_degree

for vrt in ('terrain', 'slopeshade', 'hillshade'):
    f= open ('%s-%s.vrt' % (out_prefix, vrt), 'w+')
    f.write ('<VRTDataset rasterXSize="%d" rasterYSize="%d">\n' % (xsize, ysize))

    f.write ('  <SRS>GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433],AUTHORITY["EPSG","4326"]]</SRS>\n')
    # TODO: hardcoded, but mostly fixed
    # http://www.gdal.org/gdal_datamodel.html
    # The affine transform consists of six coefficients returned by GDALDataset::GetGeoTransform() which map pixel/line coordinates
    # into georeferenced space using the following relationship:
    # Xgeo = GT(0) + Xpixel*GT(1) + Yline*GT(2)
    # Ygeo = GT(3) + Xpixel*GT(4) + Yline*GT(5)
    # In case of north up images, the GT(2) and GT(4) coefficients are zero, and the GT(1) is pixel width, and GT(5) is pixel height.
    # The (GT(0),GT(3)) position is the top left corner of the top left pixel of the raster.
    f.write ('  <GeoTransform> %e, %e, 0, %e,  0, -%e</GeoTransform>\n' %
                 (w-(degrees_per_pixel/2), degrees_per_pixel, n+(degrees_per_pixel/2),
                  degrees_per_pixel))

    if vrt in ('terrain', 'slopeshade'):
        bands_colors= ( (1, 'Red'), (2, 'Green'), (3, 'Blue') )
    else:
        bands_colors= ( (1, 'Gray'), )

    for band, color in bands_colors:
        f.write ('  <VRTRasterBand dataType="Byte" band="%d">\n' % band)
        f.write ('    <ColorInterp>%s</ColorInterp>\n' % color)

        yOff= 0

        for lat in range (n-1, s-1, -1):
            xOff= 0

            for lon in range (w, e):
                # TODO: hardcoded
                if lon<0:
                    lon= -lon
                    # filename= '%s/n%02d_w%03d_1arc_v3-%s.tif' % (src_dir, lat, lon, vrt)
                    filename= '%s/N%02dW%03d-%s.tif' % (src_dir, lat, lon, vrt)
                else:
                    # filename= '%s/n%02d_e%03d_1arc_v3-%s.tif' % (src_dir, lat, lon, vrt)
                    filename= '%s/N%02dE%03d-%s.tif' % (src_dir, lat, lon, vrt)

                if _f (filename):
                    f.write ('    <SimpleSource>\n')
                    f.write ('      <SourceFilename relativeToVRT="1">%s</SourceFilename>\n' % filename)
                    f.write ('      <SourceBand>%d</SourceBand>\n' % band)
                    f.write ('      <SourceProperties RasterXSize="%d" RasterYSize="%d" DataType="Byte" BlockXSize="256" BlockYSize="256"/>\n' % (pixels_per_degree+1, pixels_per_degree+1))
                    # TODO: hardcoded for corrected files
                    if lat<50 or True:
                        f.write ('      <SrcRect xOff="0" yOff="0" xSize="%d" ySize="%d"/>\n' % (pixels_per_degree, pixels_per_degree))
                    else:
                        f.write ('      <SrcRect xOff="1" yOff="1" xSize="%d" ySize="%d"/>\n' % (pixels_per_degree, pixels_per_degree))
                    f.write ('      <DstRect xOff="%d" yOff="%d" xSize="%d" ySize="%d"/>\n' % (xOff, yOff, pixels_per_degree, pixels_per_degree))
                    f.write ('    </SimpleSource>\n')

                xOff+= pixels_per_degree

            yOff+= pixels_per_degree

        f.write ('  </VRTRasterBand>\n')

    f.write ('</VRTDataset>\n')
    f.close ()
